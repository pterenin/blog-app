{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_POSTS, CREATE_POST, UPDATE_POST, DELETE_POST } from \"../querirs/queries\";\nconst usePostManagement = () => {\n  _s();\n  const [show, setShow] = useState(false);\n  const [page, setPage] = useState(1);\n  const [editedPost, setEditedPost] = useState(undefined);\n  const [totalCount, setTotalCount] = useState(0);\n  const [postList, setPostList] = useState([]);\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(GET_POSTS, {\n    variables: {\n      options: {\n        paginate: {\n          page: page,\n          limit: 20\n        }\n      }\n    }\n  });\n  const [createPost, {\n    data: createPostData,\n    loading: createPostLoading,\n    error: createPostError\n  }] = useMutation(CREATE_POST);\n  const [deletePost, {\n    loading: deleting,\n    error: deleteError\n  }] = useMutation(DELETE_POST, {\n    onCompleted: () => {}\n  });\n  const [updatePost, {\n    loading: updating,\n    error: updateError\n  }] = useMutation(UPDATE_POST);\n  useEffect(() => {\n    var _data$posts;\n    if (data !== null && data !== void 0 && (_data$posts = data.posts) !== null && _data$posts !== void 0 && _data$posts.data) {\n      setPostList([...postList, ...data.posts.data]);\n      setTotalCount(data.posts.meta.totalCount);\n    }\n  }, [data, loading]);\n  return {\n    show,\n    setShow,\n    page,\n    setPage,\n    editedPost,\n    setEditedPost,\n    totalCount,\n    setTotalCount,\n    postList,\n    setPostList,\n    createPost,\n    deletePost,\n    updatePost,\n    fetchMore\n  };\n};\n_s(usePostManagement, \"gVKZjlN3scPzRBTJPm/g7xrkttY=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation];\n});\nexport default usePostManagement;","map":{"version":3,"names":["useState","useEffect","useQuery","useMutation","GET_POSTS","CREATE_POST","UPDATE_POST","DELETE_POST","usePostManagement","_s","show","setShow","page","setPage","editedPost","setEditedPost","undefined","totalCount","setTotalCount","postList","setPostList","loading","error","data","fetchMore","variables","options","paginate","limit","createPost","createPostData","createPostLoading","createPostError","deletePost","deleting","deleteError","onCompleted","updatePost","updating","updateError","_data$posts","posts","meta"],"sources":["/Users/pavelterenin/workspace/blog-app/src/hooks/usePostManagement.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_POSTS, CREATE_POST, UPDATE_POST, DELETE_POST } from \"../querirs/queries\"\nimport { Post } from '../Types/types';\n\nconst usePostManagement = () => {\n  const [show, setShow] = useState(false);\n  const [page, setPage] = useState(1);\n  const [editedPost, setEditedPost] = useState<Post | undefined>(undefined);\n  const [totalCount, setTotalCount] = useState(0);\n  const [postList, setPostList] = useState<Post[]>([]);\n\n  const { loading, error, data, fetchMore } = useQuery(GET_POSTS, {\n    variables: {\n      options: {\n        paginate: {\n          page: page,\n          limit: 20\n        }\n      }\n    }\n  });\n  const [createPost, { data: createPostData, loading: createPostLoading, error: createPostError }] = useMutation(CREATE_POST);\n  const [deletePost, { loading: deleting, error: deleteError }] = useMutation(DELETE_POST, {\n    onCompleted: () => {\n    }\n  });\n  const [updatePost, { loading: updating, error: updateError }] = useMutation(UPDATE_POST);\n\n  useEffect(() => {\n    if (data?.posts?.data) {\n      setPostList([...postList, ...data.posts.data]);\n      setTotalCount(data.posts.meta.totalCount);\n    }\n  }, [data, loading]);\n\n  return {\n    show, setShow,\n    page, setPage,\n    editedPost, setEditedPost,\n    totalCount, setTotalCount,\n    postList, setPostList,\n    createPost, deletePost, updatePost,\n    fetchMore,\n  };\n};\n\nexport default usePostManagement;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,EAAEC,WAAW,QAAQ,gBAAgB;AACtD,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAW,QAAQ,oBAAoB;AAGrF,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAmBgB,SAAS,CAAC;EACzE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAS,EAAE,CAAC;EAEpD,MAAM;IAAEqB,OAAO;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGtB,QAAQ,CAACE,SAAS,EAAE;IAC9DqB,SAAS,EAAE;MACTC,OAAO,EAAE;QACPC,QAAQ,EAAE;UACRf,IAAI,EAAEA,IAAI;UACVgB,KAAK,EAAE;QACT;MACF;IACF;EACF,CAAC,CAAC;EACF,MAAM,CAACC,UAAU,EAAE;IAAEN,IAAI,EAAEO,cAAc;IAAET,OAAO,EAAEU,iBAAiB;IAAET,KAAK,EAAEU;EAAgB,CAAC,CAAC,GAAG7B,WAAW,CAACE,WAAW,CAAC;EAC3H,MAAM,CAAC4B,UAAU,EAAE;IAAEZ,OAAO,EAAEa,QAAQ;IAAEZ,KAAK,EAAEa;EAAY,CAAC,CAAC,GAAGhC,WAAW,CAACI,WAAW,EAAE;IACvF6B,WAAW,EAAEA,CAAA,KAAM,CACnB;EACF,CAAC,CAAC;EACF,MAAM,CAACC,UAAU,EAAE;IAAEhB,OAAO,EAAEiB,QAAQ;IAAEhB,KAAK,EAAEiB;EAAY,CAAC,CAAC,GAAGpC,WAAW,CAACG,WAAW,CAAC;EAExFL,SAAS,CAAC,MAAM;IAAA,IAAAuC,WAAA;IACd,IAAIjB,IAAI,aAAJA,IAAI,gBAAAiB,WAAA,GAAJjB,IAAI,CAAEkB,KAAK,cAAAD,WAAA,eAAXA,WAAA,CAAajB,IAAI,EAAE;MACrBH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE,GAAGI,IAAI,CAACkB,KAAK,CAAClB,IAAI,CAAC,CAAC;MAC9CL,aAAa,CAACK,IAAI,CAACkB,KAAK,CAACC,IAAI,CAACzB,UAAU,CAAC;IAC3C;EACF,CAAC,EAAE,CAACM,IAAI,EAAEF,OAAO,CAAC,CAAC;EAEnB,OAAO;IACLX,IAAI;IAAEC,OAAO;IACbC,IAAI;IAAEC,OAAO;IACbC,UAAU;IAAEC,aAAa;IACzBE,UAAU;IAAEC,aAAa;IACzBC,QAAQ;IAAEC,WAAW;IACrBS,UAAU;IAAEI,UAAU;IAAEI,UAAU;IAClCb;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CAxCID,iBAAiB;EAAA,QAOuBN,QAAQ,EAU+CC,WAAW,EAC9CA,WAAW,EAIXA,WAAW;AAAA;AAoB7E,eAAeK,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}